print(random_sample)
# Fazendo a previsão para o valor aleatório
random_prediction <- predict(model, newdata = random_sample)
# Resultado da previsão
print(random_prediction)
# Exibindo a classe prevista
predicted_class <- getPredictionResponse(random_prediction)
print(paste("Classe prevista: ", predicted_class))
library(mlr)
# Importo os dados iris
dados <- iris
head(dados)
# Crio a tarefa com os dados e a variável target
task <- makeClassifTask(data = dados, target = "Species")
# Crio o modelo Random Forest, passando response para classificação de classe
# Defino os parâmetros do modelo
classif.lrn <- makeLearner("classif.randomForest",
predict.type = "response",
par.vals = list(ntree = 1000,
mtry = 4))
# Realizo o treinamento do modelo
model <- train(classif.lrn, task)
# Fazendo previsões no conjunto de dados
predictions <- predict(model, task)
# Acessando as previsões diretamente
Valores_reais <- getPredictionTruth(predictions) # pega valores reais do modelo
Valores_preditos <- getPredictionResponse(predictions) # Pega os valores preditos e compara
# Comparando as previsões com os valores reais
correct_predictions <- sum(truth_values == response_values)
print(correct_predictions)
random_sample <- data.frame(
Sepal.Length = runif(1, min(dados$Sepal.Length), max(dados$Sepal.Length)),
Sepal.Width = runif(1, min(dados$Sepal.Width), max(dados$Sepal.Width)),
Petal.Length = runif(1, min(dados$Petal.Length), max(dados$Petal.Length)),
Petal.Width = runif(1, min(dados$Petal.Width), max(dados$Petal.Width))
)
# Verificando a amostra gerada
print(random_sample)
# Fazendo a previsão para o valor aleatório
random_prediction <- predict(model, newdata = random_sample)
# Resultado da previsão
print(random_prediction)
# Exibindo a classe prevista
predicted_class <- getPredictionResponse(random_prediction)
print(paste("Classe prevista: ", predicted_class))
generateThreshVsPerfData(predictions)
library(mlr)
# Importo os dados iris
dados <- iris
head(dados)
# Crio a tarefa com os dados e a variável target
task <- makeClassifTask(data = dados, target = "Species")
# Crio o modelo Random Forest, passando response para classificação de classe
# Defino os parâmetros do modelo
classif.lrn <- makeLearner("classif.randomForest",
predict.type = "response",
par.vals = list(ntree = 1000,
mtry = 4))
# Realizo o treinamento do modelo
model <- train(classif.lrn, task)
# Fazendo previsões no conjunto de dados
predictions <- predict(model, task)
# Acessando as previsões diretamente
Valores_reais <- getPredictionTruth(predictions)  # valores reais
Valores_preditos <- getPredictionResponse(predictions)  # valores preditos
# Comparando as previsões com os valores reais
correct_predictions <- sum(Valores_reais == Valores_preditos)
print(paste("Número de acertos: ", correct_predictions))
# Gerando uma amostra aleatória
random_sample <- data.frame(
Sepal.Length = runif(1, min(dados$Sepal.Length), max(dados$Sepal.Length)),
Sepal.Width = runif(1, min(dados$Sepal.Width), max(dados$Sepal.Width)),
Petal.Length = runif(1, min(dados$Petal.Length), max(dados$Petal.Length)),
Petal.Width = runif(1, min(dados$Petal.Width), max(dados$Petal.Width))
)
# Verificando a amostra gerada
print("Amostra aleatória gerada:")
print(random_sample)
# Fazendo a previsão para o valor aleatório
random_prediction <- predict(model, newdata = random_sample)
# Resultado da previsão
print("Resultado da previsão para a amostra aleatória:")
print(random_prediction)
# Exibindo a classe prevista
predicted_class <- getPredictionResponse(random_prediction)
print(paste("Classe prevista: ", predicted_class))
# Gerando o gráfico de performance
generateThreshVsPerfData(predictions)
library(mlr)
# Importo os dados iris
dados <- iris
head(dados)
# Crio a tarefa com os dados e a variável target
task <- makeClassifTask(data = dados, target = "Species")
# Crio o modelo Random Forest, passando response para classificação de classe
# Defino os parâmetros do modelo
classif.lrn <- makeLearner("classif.randomForest",
predict.type = "response",
par.vals = list(ntree = 1000,
mtry = 4))
# Realizo o treinamento do modelo
model <- train(classif.lrn, task)
# Fazendo previsões no conjunto de dados
predictions <- predict(model, task)
# Acessando as previsões diretamente
Valores_reais <- getPredictionTruth(predictions)  # valores reais
Valores_preditos <- getPredictionResponse(predictions)  # valores preditos
# Comparando as previsões com os valores reais
correct_predictions <- sum(Valores_reais == Valores_preditos)
print(paste("Número de acertos: ", correct_predictions))
# Gerando uma amostra aleatória
random_sample <- data.frame(
Sepal.Length = runif(1, min(dados$Sepal.Length), max(dados$Sepal.Length)),
Sepal.Width = runif(1, min(dados$Sepal.Width), max(dados$Sepal.Width)),
Petal.Length = runif(1, min(dados$Petal.Length), max(dados$Petal.Length)),
Petal.Width = runif(1, min(dados$Petal.Width), max(dados$Petal.Width))
)
# Verificando a amostra gerada
print("Amostra aleatória gerada:")
print(random_sample)
# Fazendo a previsão para o valor aleatório
random_prediction <- predict(model, newdata = random_sample)
# Resultado da previsão
print("Resultado da previsão para a amostra aleatória:")
print(random_prediction)
# Exibindo a classe prevista
predicted_class <- getPredictionResponse(random_prediction)
print(paste("Classe prevista: ", predicted_class))
library(mlr)
# Importo os dados iris
dados <- iris
head(dados)
prever = dados[1]
print(prever)
# Crio a tarefa com os dados e a variável target
task <- makeClassifTask(data = dados, target = "Species")
# Crio o modelo Random Forest, passando response para classificação de classe
# Defino os parâmetros do modelo
classif.lrn <- makeLearner("classif.randomForest",
predict.type = "response",
par.vals = list(ntree = 1000,
mtry = 4))
# Realizo o treinamento do modelo
model <- train(classif.lrn, task)
# Fazendo previsões no conjunto de dados
predictions <- predict(model, task)
# Acessando as previsões diretamente
Valores_reais <- getPredictionTruth(predictions)  # valores reais
Valores_preditos <- getPredictionResponse(predictions)  # valores preditos
# Comparando as previsões com os valores reais
correct_predictions <- sum(Valores_reais == Valores_preditos)
print(paste("Número de acertos: ", correct_predictions))
# Gerando uma amostra aleatória
random_sample <- data.frame(
Sepal.Length = runif(1, min(dados$Sepal.Length), max(dados$Sepal.Length)),
Sepal.Width = runif(1, min(dados$Sepal.Width), max(dados$Sepal.Width)),
Petal.Length = runif(1, min(dados$Petal.Length), max(dados$Petal.Length)),
Petal.Width = runif(1, min(dados$Petal.Width), max(dados$Petal.Width))
)
# Verificando a amostra gerada
print("Amostra aleatória gerada:")
print(random_sample)
# Fazendo a previsão para o valor aleatório
random_prediction <- predict(model, newdata = random_sample)
# Resultado da previsão
print("Resultado da previsão para a amostra aleatória:")
print(random_prediction)
# Exibindo a classe prevista
predicted_class <- getPredictionResponse(random_prediction)
print(paste("Classe prevista: ", predicted_class))
library(mlr)
# Importo os dados iris
dados <- iris
head(dados)
prever = dados[1,]
print(prever)
# Crio a tarefa com os dados e a variável target
task <- makeClassifTask(data = dados, target = "Species")
# Crio o modelo Random Forest, passando response para classificação de classe
# Defino os parâmetros do modelo
classif.lrn <- makeLearner("classif.randomForest",
predict.type = "response",
par.vals = list(ntree = 1000,
mtry = 4))
# Realizo o treinamento do modelo
model <- train(classif.lrn, task)
# Fazendo previsões no conjunto de dados
predictions <- predict(model, task)
# Acessando as previsões diretamente
Valores_reais <- getPredictionTruth(predictions)  # valores reais
Valores_preditos <- getPredictionResponse(predictions)  # valores preditos
# Comparando as previsões com os valores reais
correct_predictions <- sum(Valores_reais == Valores_preditos)
print(paste("Número de acertos: ", correct_predictions))
# Gerando uma amostra aleatória
random_sample <- data.frame(
Sepal.Length = runif(1, min(dados$Sepal.Length), max(dados$Sepal.Length)),
Sepal.Width = runif(1, min(dados$Sepal.Width), max(dados$Sepal.Width)),
Petal.Length = runif(1, min(dados$Petal.Length), max(dados$Petal.Length)),
Petal.Width = runif(1, min(dados$Petal.Width), max(dados$Petal.Width))
)
# Verificando a amostra gerada
print("Amostra aleatória gerada:")
print(random_sample)
# Fazendo a previsão para o valor aleatório
random_prediction <- predict(model, newdata = random_sample)
# Resultado da previsão
print("Resultado da previsão para a amostra aleatória:")
print(random_prediction)
# Exibindo a classe prevista
predicted_class <- getPredictionResponse(random_prediction)
print(paste("Classe prevista: ", predicted_class))
library(mlr)
# Importo os dados iris
dados <- iris
head(dados)
prever = dados[1,ncol(dados)]
print(prever)
# Crio a tarefa com os dados e a variável target
task <- makeClassifTask(data = dados, target = "Species")
# Crio o modelo Random Forest, passando response para classificação de classe
# Defino os parâmetros do modelo
classif.lrn <- makeLearner("classif.randomForest",
predict.type = "response",
par.vals = list(ntree = 1000,
mtry = 4))
# Realizo o treinamento do modelo
model <- train(classif.lrn, task)
# Fazendo previsões no conjunto de dados
predictions <- predict(model, task)
# Acessando as previsões diretamente
Valores_reais <- getPredictionTruth(predictions)  # valores reais
Valores_preditos <- getPredictionResponse(predictions)  # valores preditos
# Comparando as previsões com os valores reais
correct_predictions <- sum(Valores_reais == Valores_preditos)
print(paste("Número de acertos: ", correct_predictions))
# Gerando uma amostra aleatória
random_sample <- data.frame(
Sepal.Length = runif(1, min(dados$Sepal.Length), max(dados$Sepal.Length)),
Sepal.Width = runif(1, min(dados$Sepal.Width), max(dados$Sepal.Width)),
Petal.Length = runif(1, min(dados$Petal.Length), max(dados$Petal.Length)),
Petal.Width = runif(1, min(dados$Petal.Width), max(dados$Petal.Width))
)
# Verificando a amostra gerada
print("Amostra aleatória gerada:")
print(random_sample)
# Fazendo a previsão para o valor aleatório
random_prediction <- predict(model, newdata = random_sample)
# Resultado da previsão
print("Resultado da previsão para a amostra aleatória:")
print(random_prediction)
# Exibindo a classe prevista
predicted_class <- getPredictionResponse(random_prediction)
print(paste("Classe prevista: ", predicted_class))
library(mlr)
# Importo os dados iris
dados <- iris
head(dados)
prever <- dados[1, -ncol(dados)]
print(prever)
# Crio a tarefa com os dados e a variável target
task <- makeClassifTask(data = dados, target = "Species")
# Crio o modelo Random Forest, passando response para classificação de classe
# Defino os parâmetros do modelo
classif.lrn <- makeLearner("classif.randomForest",
predict.type = "response",
par.vals = list(ntree = 1000,
mtry = 4))
# Realizo o treinamento do modelo
model <- train(classif.lrn, task)
# Fazendo previsões no conjunto de dados
predictions <- predict(model, task)
# Acessando as previsões diretamente
Valores_reais <- getPredictionTruth(predictions)  # valores reais
Valores_preditos <- getPredictionResponse(predictions)  # valores preditos
# Comparando as previsões com os valores reais
correct_predictions <- sum(Valores_reais == Valores_preditos)
print(paste("Número de acertos: ", correct_predictions))
# Gerando uma amostra aleatória
random_sample <- data.frame(
Sepal.Length = runif(1, min(dados$Sepal.Length), max(dados$Sepal.Length)),
Sepal.Width = runif(1, min(dados$Sepal.Width), max(dados$Sepal.Width)),
Petal.Length = runif(1, min(dados$Petal.Length), max(dados$Petal.Length)),
Petal.Width = runif(1, min(dados$Petal.Width), max(dados$Petal.Width))
)
# Verificando a amostra gerada
print("Amostra aleatória gerada:")
print(random_sample)
# Fazendo a previsão para o valor aleatório
random_prediction <- predict(model, newdata = random_sample)
# Resultado da previsão
print("Resultado da previsão para a amostra aleatória:")
print(random_prediction)
# Exibindo a classe prevista
predicted_class <- getPredictionResponse(random_prediction)
print(paste("Classe prevista: ", predicted_class))
library(mlr)
# Importo os dados iris
dados <- iris
head(dados)
prever <- dados[1, -ncol(dados)]
print(prever)
# Crio a tarefa com os dados e a variável target
task <- makeClassifTask(data = dados, target = "Species")
# Crio o modelo Random Forest, passando response para classificação de classe
# Defino os parâmetros do modelo
classif.lrn <- makeLearner("classif.randomForest",
predict.type = "response",
par.vals = list(ntree = 1000,
mtry = 4))
# Realizo o treinamento do modelo
model <- train(classif.lrn, task)
# Fazendo previsões no conjunto de dados
predictions <- predict(model, task)
# Acessando as previsões diretamente
Valores_reais <- getPredictionTruth(predictions)  # valores reais
Valores_preditos <- getPredictionResponse(predictions)  # valores preditos
# Comparando as previsões com os valores reais
correct_predictions <- sum(Valores_reais == Valores_preditos)
print(paste("Número de acertos: ", correct_predictions))
# Gerando uma amostra aleatória
random_sample <- data.frame(
Sepal.Length = runif(1, min(dados$Sepal.Length), max(dados$Sepal.Length)),
Sepal.Width = runif(1, min(dados$Sepal.Width), max(dados$Sepal.Width)),
Petal.Length = runif(1, min(dados$Petal.Length), max(dados$Petal.Length)),
Petal.Width = runif(1, min(dados$Petal.Width), max(dados$Petal.Width))
)
# Verificando a amostra gerada
print("Amostra aleatória gerada:")
print(random_sample)
# Fazendo a previsão para o valor aleatório
random_prediction <- predict(model, newdata = random_sample)
# Resultado da previsão
print("Resultado da previsão para a amostra aleatória:")
print(random_prediction)
# Exibindo a classe prevista
predicted_class <- getPredictionResponse(random_prediction)
print(paste("Classe prevista: ", predicted_class))
library(mlr)
# Importo os dados iris
dados <- iris
head(dados)
prever <- dados[1, ncol(dados)]
print(prever)
# Crio a tarefa com os dados e a variável target
task <- makeClassifTask(data = dados, target = "Species")
# Crio o modelo Random Forest, passando response para classificação de classe
# Defino os parâmetros do modelo
classif.lrn <- makeLearner("classif.randomForest",
predict.type = "response",
par.vals = list(ntree = 1000,
mtry = 4))
# Realizo o treinamento do modelo
model <- train(classif.lrn, task)
# Fazendo previsões no conjunto de dados
predictions <- predict(model, task)
# Acessando as previsões diretamente
Valores_reais <- getPredictionTruth(predictions)  # valores reais
Valores_preditos <- getPredictionResponse(predictions)  # valores preditos
# Comparando as previsões com os valores reais
correct_predictions <- sum(Valores_reais == Valores_preditos)
print(paste("Número de acertos: ", correct_predictions))
# Gerando uma amostra aleatória
random_sample <- data.frame(
Sepal.Length = runif(1, min(dados$Sepal.Length), max(dados$Sepal.Length)),
Sepal.Width = runif(1, min(dados$Sepal.Width), max(dados$Sepal.Width)),
Petal.Length = runif(1, min(dados$Petal.Length), max(dados$Petal.Length)),
Petal.Width = runif(1, min(dados$Petal.Width), max(dados$Petal.Width))
)
# Verificando a amostra gerada
print("Amostra aleatória gerada:")
print(random_sample)
# Fazendo a previsão para o valor aleatório
random_prediction <- predict(model, newdata = random_sample)
# Resultado da previsão
print("Resultado da previsão para a amostra aleatória:")
print(random_prediction)
# Exibindo a classe prevista
predicted_class <- getPredictionResponse(random_prediction)
print(paste("Classe prevista: ", predicted_class))
print(prever)
library(mlr)
# Importo os dados iris
dados <- iris
head(dados)
prever <- dados[1, -ncol(dados)]
print(prever)
# Crio a tarefa com os dados e a variável target
task <- makeClassifTask(data = dados, target = "Species")
# Crio o modelo Random Forest, passando response para classificação de classe
# Defino os parâmetros do modelo
classif.lrn <- makeLearner("classif.randomForest",
predict.type = "response",
par.vals = list(ntree = 1000,
mtry = 4))
# Realizo o treinamento do modelo
model <- train(classif.lrn, task)
# Fazendo previsões no conjunto de dados
predictions <- predict(model, task)
# Acessando as previsões diretamente
Valores_reais <- getPredictionTruth(predictions)  # valores reais
Valores_preditos <- getPredictionResponse(predictions)  # valores preditos
# Comparando as previsões com os valores reais
correct_predictions <- sum(Valores_reais == Valores_preditos)
print(paste("Número de acertos: ", correct_predictions))
# Gerando uma amostra aleatória
random_sample <- data.frame(
Sepal.Length = runif(1, min(dados$Sepal.Length), max(dados$Sepal.Length)),
Sepal.Width = runif(1, min(dados$Sepal.Width), max(dados$Sepal.Width)),
Petal.Length = runif(1, min(dados$Petal.Length), max(dados$Petal.Length)),
Petal.Width = runif(1, min(dados$Petal.Width), max(dados$Petal.Width))
)
# Verificando a amostra gerada
print("Amostra aleatória gerada:")
print(random_sample)
# Fazendo a previsão para o valor aleatório
random_prediction <- predict(model, newdata = random_sample)
# Resultado da previsão
print("Resultado da previsão para a amostra aleatória:")
print(random_prediction)
# Exibindo a classe prevista
predicted_class <- getPredictionResponse(random_prediction)
print(paste("Classe prevista: ", predicted_class))
library(mlr)
# Importo os dados iris
dados <- iris
head(dados)
prever <- dados[1, -ncol(dados)]
print(prever)
# Crio a tarefa com os dados e a variável target
task <- makeClassifTask(data = dados, target = "Species")
# Crio o modelo Random Forest, passando response para classificação de classe
# Defino os parâmetros do modelo
classif.lrn <- makeLearner("classif.randomForest",
predict.type = "response",
par.vals = list(ntree = 1000,
mtry = 4))
# Realizo o treinamento do modelo
model <- train(classif.lrn, task)
# Fazendo previsões no conjunto de dados
predictions <- predict(model, task)
# Acessando as previsões diretamente
Valores_reais <- getPredictionTruth(predictions)  # valores reais
Valores_preditos <- getPredictionResponse(predictions)  # valores preditos
# Comparando as previsões com os valores reais
correct_predictions <- sum(Valores_reais == Valores_preditos)
print(paste("Número de acertos: ", correct_predictions))
# Gerando uma amostra aleatória
random_sample <- data.frame(
Sepal.Length = runif(1, min(dados$Sepal.Length), max(dados$Sepal.Length)),
Sepal.Width = runif(1, min(dados$Sepal.Width), max(dados$Sepal.Width)),
Petal.Length = runif(1, min(dados$Petal.Length), max(dados$Petal.Length)),
Petal.Width = runif(1, min(dados$Petal.Width), max(dados$Petal.Width))
)
# Verificando a amostra gerada
print("Amostra aleatória gerada:")
print(random_sample)
# Fazendo a previsão para o valor aleatório
random_prediction <- predict(model, newdata = prever)
# Resultado da previsão
print("Resultado da previsão para a amostra aleatória:")
print(random_prediction)
# Exibindo a classe prevista
predicted_class <- getPredictionResponse(random_prediction)
print(paste("Classe prevista: ", predicted_class))
shiny::runApp('C:/Users/juan_/OneDrive/Área de Trabalho/Estudo_shiny_dev/Biblioteca_Shiny/Aplicação/Curso_shiny')
runApp('C:/Users/juan_/OneDrive/Área de Trabalho/Estudo_shiny_dev/Biblioteca_Shiny/Aplicação/Curso_shiny')
runApp('C:/Users/juan_/OneDrive/Área de Trabalho/Estudo_shiny_dev/Biblioteca_Shiny/Aplicação/Curso_shiny')
runApp('C:/Users/juan_/OneDrive/Área de Trabalho/Estudo_shiny_dev/Biblioteca_Shiny/Aplicação/Curso_shiny')
runApp('C:/Users/juan_/OneDrive/Área de Trabalho/Estudo_shiny_dev/Biblioteca_Shiny/Aplicação/Curso_shiny')
runApp('C:/Users/juan_/OneDrive/Área de Trabalho/Estudo_shiny_dev/Biblioteca_Shiny/Aplicação/Curso_shiny')
runApp('C:/Users/juan_/OneDrive/Área de Trabalho/Estudo_shiny_dev/Biblioteca_Shiny/Aplicação/Curso_shiny')
runApp('C:/Users/juan_/OneDrive/Área de Trabalho/Estudo_shiny_dev/Biblioteca_Shiny/Aplicação/Curso_shiny')
runApp('C:/Users/juan_/OneDrive/Área de Trabalho/Estudo_shiny_dev/Biblioteca_Shiny/Aplicação/Curso_shiny')
runApp('C:/Users/juan_/OneDrive/Área de Trabalho/Estudo_shiny_dev/Biblioteca_Shiny/Aplicação/Curso_shiny')
runApp('C:/Users/juan_/OneDrive/Área de Trabalho/Estudo_shiny_dev/Biblioteca_Shiny/Aplicação/Curso_shiny')
runApp('C:/Users/juan_/OneDrive/Área de Trabalho/Estudo_shiny_dev/Biblioteca_Shiny/Aplicação/Curso_shiny')
runApp('C:/Users/juan_/OneDrive/Área de Trabalho/Estudo_shiny_dev/Biblioteca_Shiny/Aplicação/Curso_shiny')
runApp('C:/Users/juan_/OneDrive/Área de Trabalho/Estudo_shiny_dev/Biblioteca_Shiny/Aplicação/Curso_shiny')
runApp('C:/Users/juan_/OneDrive/Área de Trabalho/Estudo_shiny_dev/Biblioteca_Shiny/Aplicação/Curso_shiny')
runApp('C:/Users/juan_/OneDrive/Área de Trabalho/Estudo_shiny_dev/Biblioteca_Shiny/Aplicação/Curso_shiny')
runApp('C:/Users/juan_/OneDrive/Área de Trabalho/Estudo_shiny_dev/Biblioteca_Shiny/Aplicação/Curso_shiny')
runApp('C:/Users/juan_/OneDrive/Área de Trabalho/Estudo_shiny_dev/Biblioteca_Shiny/Aplicação/Curso_shiny')
setwd("C:/Users/juan_/OneDrive/Área de Trabalho/Estudo_shiny_dev/Biblioteca_Shiny/Aplicação/Curso_shiny")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(plumber)
# Executar o servidor
api <- plumb("predict_model.R")  # Caminho do arquivo correto
pr$run(port = 8000, host = "0.0.0.0")  # "0.0.0.0" permite conexões externas
library(plumber)
# Executar o servidor
api <- plumb("predict_model.R")  # Caminho do arquivo correto
pr$run(port = 8000, host = "0.0.0.0")
library(plumber)
# Executar o servidor
api <- plumb("predict_model.R")  # Caminho do arquivo correto
api$run(port = 8000, host = "0.0.0.0")
runApp()
setwd("C:/Users/juan_/OneDrive/Área de Trabalho/Estudo_shiny_dev/Biblioteca_Shiny/Aplicação/Curso_shiny")
runApp()
runApp()
runApp()
setwd("C:/Users/juan_/OneDrive/Área de Trabalho/Estudo_shiny_dev/Biblioteca_Shiny/Aplicação/Curso_shiny")
runApp()
runApp()
runApp()
